upstream client {
    server client:3000; # client is the name of the service in the docker-compose file, and 3000 is the port by default
}

upstream api {
    server api:5000; # server is the name of the service in the docker-compose file, and 3000 is the port we setup in the index.js file of the server
}

server {
    listen 80;

    location / {
        proxy_pass http://client;
    }
    location /api {
        rewrite /api/(.*) /$1 break; # basically removing the /api from the url (we tell to : spot what's after /api with a regex - rewrite the url without ($1 refer to the result of the regex) - stop the rewrite)
        proxy_pass http://api;
    }

    location /ws { # Handle WebSocket connections (only used for development, not production)
        proxy_pass http://client; # Redirects all requests from the `/ws` path to the `client` service (our React app)
        proxy_http_version 1.1; # Uses HTTP/1.1, which is required for WebSocket connections (HTTP/1.0 does not support WebSocket)
        proxy_set_header Upgrade $http_upgrade; # Adds an HTTP header to inform the server that the connection should be upgraded from HTTP to WebSocket
        proxy_set_header Connection "Upgrade"; # Adds the `Connection: Upgrade` header, necessary for the WebSocket connection to be accepted
    }
}